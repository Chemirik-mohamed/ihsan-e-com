// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum ProductStatus {
  EN_STOCK
  RUPTURE
  EN_COMMANDE
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

enum UserRole {
  CLIENT
  ADMIN
}

// Models

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String?
  role      UserRole  @default(CLIENT)
  orders    Order[]
  addresses Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  sku         String           @unique
  price       Float
  stock       Int
  status      ProductStatus    @default(EN_STOCK)
  variants    ProductVariant[]
  images      Image[]
  orderItems  OrderItem[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ProductVariant {
  id        Int         @id @default(autoincrement())
  name      String
  color     String
  sku       String      @unique
  product   Product     @relation(fields: [productId], references: [id])
  productId Int
  stock     Int
  OrderItem OrderItem[]
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String
  altText   String?
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Order {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  address   Address     @relation(fields: [addressId], references: [id])
  addressId Int
  total     Float
  status    OrderStatus @default(PENDING)
  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        Int             @id @default(autoincrement())
  order     Order           @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product         @relation(fields: [productId], references: [id])
  productId Int
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId Int?
  quantity  Int
}

model Address {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
  orders   Order[]
  fullName String
  phone    String
  street   String
  city     String
  country  String
  zipCode  String
}

// Optionnel - Ã  activer plus tard
// model NewsletterSubscriber {
//   id        Int      @id @default(autoincrement())
//   email     String   @unique
//   createdAt DateTime @default(now())
// }
