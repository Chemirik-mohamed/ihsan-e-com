// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum ProductStatus {
  EN_STOCK
  RUPTURE
  EN_COMMANDE
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

enum UserRole {
  CLIENT
  ADMIN
}

enum PaymentMethod {
  CARD
  PAYPAL
  CASH_ON_DELIVERY
  BANK_TRANSFER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

// Models

model User {
  id        String   @id @default(uuid()) @map("user_id")
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(CLIENT)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  carts     Cart[]
}

model Product {
  id           String           @id @default(uuid()) @map("product_id")
  name         String
  slug         String           @unique
  description  String?
  sku          String           @unique
  price        Float
  stock        Int
  status       ProductStatus    @default(EN_STOCK)
  category     Category?        @relation(fields: [categorySlug], references: [slug])
  categorySlug String?
  variants     ProductVariant[]
  images       Image[]
  orderItems   OrderItem[]
  metadata     Json?
  deletedAt    DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  cartItems    CartItem[]

  @@index([status])
  @@index([categorySlug])
}

model ProductVariant {
  id         String      @id @default(uuid()) @map("variant_id")
  name       String
  color      String
  sku        String      @unique
  isDefault  Boolean     @default(false)
  product    Product     @relation(fields: [productId], references: [id])
  productId  String
  stock      Int
  orderItems OrderItem[]
  deletedAt  DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  cartItems  CartItem[]
}

model Category {
  id        String    @id @default(uuid()) @map("category_id")
  name      String
  slug      String    @unique
  products  Product[]
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Image {
  id           String    @id @default(uuid()) @map("image_id")
  url          String
  altText      String?
  product      Product   @relation(fields: [productId], references: [id])
  productId    String
  cloudinaryId String?
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Order {
  id            String         @id @default(uuid()) @map("order_id")
  reference     String         @unique @default(uuid())
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  total         Float
  status        OrderStatus    @default(PENDING)
  items         OrderItem[]
  fullName      String
  phone         String
  street        String
  city          String
  country       String
  zipCode       String
  paymentMethod PaymentMethod?
  note          String?
  deletedAt     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([status])
}

model OrderItem {
  id        String          @id @default(uuid()) @map("order_item_id")
  order     Order           @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product         @relation(fields: [productId], references: [id])
  productId String
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId String?
  quantity  Int
  unitPrice Float
  total     Float
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Cart {
  id        String     @id @default(uuid())
  user      User?      @relation(fields: [userId], references: [id])
  userId    String? // Peut être null pour un panier invité
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String          @id @default(uuid())
  cart      Cart            @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product         @relation(fields: [productId], references: [id])
  productId String
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId String?
  quantity  Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

// Optionnel - à activer plus tard
// model NewsletterSubscriber {
//   id        Int      @id @default(autoincrement())
//   email     String   @unique
//   createdAt DateTime @default(now())
// }
